# Copyright 2024 Amazon.com, Inc. or its affiliates. 
# SPDX-License-Identifier: Apache-2.0
# Licensed under the Apache License, Version 2.0 https://aws.amazon.com/apache-2-0/

replicas: 2

resources:
  limits:
    cpu: 200m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 512Mi

grafana.ini:
  auth.anonymous:
    enabled: true
  live:
    max_connections: 0

adminPassword: "${grafana_admin_password}"

service:
  type: "NodePort"

ingress:
  enabled: true
  ingressClassName: "alb"
  annotations:
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/target-type: "ip"
    alb.ingress.kubernetes.io/target-group-attributes: "stickiness.enabled=true, stickiness.lb_cookie.duration_seconds=3600"
    alb.ingress.kubernetes.io/load-balancer-attributes: "routing.http.drop_invalid_header_fields.enabled=true"
    alb.ingress.kubernetes.io/listen-ports: "[{\"HTTP\": 80},{\"HTTPS\":443}]"
    alb.ingress.kubernetes.io/certificate-arn: "${alb_certificate_arn}"
    alb.ingress.kubernetes.io/actions.ssl-redirect: "{\"Type\": \"redirect\", \"RedirectConfig\": { \"Protocol\": \"HTTPS\", \"Port\": \"443\", \"StatusCode\": \"HTTP_301\"}}"
    alb.ingress.kubernetes.io/subnets: "${vpc_public_subnets}"
  path: /*
  pathType: ImplementationSpecific
  hosts:
    - ""
  extraPaths:
    - path: /*
      pathType: ImplementationSpecific
      backend:
        service:
          name: ssl-redirect
          port:
            name: use-annotation

nodeSelector:
  htc/node-type: "core"

tolerations:
  - key: "htc/node-type"
    operator: "Equal"
    value: "core"
    effect: "NoSchedule"

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - grafana
        topologyKey: kubernetes.io/hostname
      weight: 100

persistence:
  enabled: false

datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus-server.prometheus.svc.cluster.local
      access: proxy
      isDefault: true
      jsonData:
        httpMethod: 'POST'
    - name: InfluxDB
      type: influxdb
      url: influxdb.influxdb.svc.cluster.local:8086
      access: proxy
      isDefault: false
      database: measurementsdb
      jsonData:
        httpMode: POST

dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/default

dashboards:
  default:
    htc-metrics:
      json: |
        ${htc_metrics_dashboard_json}
    kubernetes-metrics:
      json: |
        ${kubernetes_metrics_dashboard_json}
    filter-metrics:
      json: |
        ${filter_metrics_dashboard_json}

initChownData:
  image:
    pullPolicy: Always
    repository: "${aws_htc_ecr}/ecr-public/docker/library/busybox"

image:
  repository: "${aws_htc_ecr}/grafana"

downloadDashboardsImage:
  repository: "${aws_htc_ecr}/curl"

sidecar:
  dashboards:
    enabled : true
  image:
    repository: "${aws_htc_ecr}/quay/kiwigrid/k8s-sidecar"
